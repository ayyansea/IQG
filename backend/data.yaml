---
devops:
    levels:
        - 
            name: "junior"
        - 
            name: "middle"
        - 
            name: "senior"
    categories:
        git:
            questions:
                -
                    question: "Чем отличается git pull от git fetch?"
                    answer: "git pull — это, по сути, команда git fetch, после которой сразу же следует git merge. git fetch получает изменения с сервера и сохраняет их в каталог refs/remotes/. Это никак не влияет на локальные ветки и текущие изменения. А git merge уже вливает все эти изменения в локальную копию."
                    level: "junior"
                -
                    question: "Что такое Git? Чем отличается GitLab от GitHub"
                    answer: "Git — распределённая система котроля версий. GitHub и GitLab — популярные системы контроля версий, хранения программного кода, и хостинга проектов. Сервисы не сильно отличаются друг от друга, но при сравнении можно выделить: GitLab можно запустить на собственном сервере и есть множество функций для работы в команде." 
                    level: "junior"
                -
                    question: "Что означает репозиторий в Git?"
                    answer: "Репозиторий Git — это виртуальное хранилище проекта. В нем можно хранить версии кода для доступа по мере необходимости"
                    level: "junior"
                -
                    question: "Опишите ситуации, в которых можно использовать merge или rebase."
                    answer: ""
                    level: "middle"
                -
                    question: "Как вы использовали Git для CI/CD?"
                    answer: "Пример: у каждой ветки был свой пайплайн, при пуше в ветку пайплайны запускались автоматически."
                    level: "middle"
                -
                    question: "Как можно отменить коммит в Git, если он уже был опубликован?"
                    answer: "Можно использовать команду git amend - для исправления последнего коммита. Для отмены последнего коммита нужно использовать rebase на состояние HEAD~1, затем сделать force push."
                    level: "middle"
                -
                    question: "Перед вами: монорепозиторий, который руками копируют на машины. Опишите пошагово все действия, которыми бы вы разбили репозиторий на части и настроили CI/CD."
                    answer: "*Решение описанной ситуации*"
                    level: "senior"
                - 
                    question: "Что такое staging area или index в Git?"
                    answer: "Область подготовленных файлов (staging area) — это обычный файл, обычно хранящийся в каталоге Git, который содержит информацию о том, что должно войти в следующий коммит. Иногда его называют индексом (index), но в последнее время становится стандартом называть его областью подготовленных файлов. Область подготовленных файлов это уже не рабочий каталог, но ещё и не коммит."
                    level: "senior"
        cicd:
            questions:
                -
                    question: "Что такое Jenkins и CI/CD?"
                    answer: "Jenkins — программная система с открытым исходным кодом на Java, предназначенная для обеспечения процесса непрерывной интеграции программного обеспечения. CICD — это комбинация непрерывной интеграции и непрерывного развертывания программного обеспечения в процессе разработки."
                    level: "junior"
                -
                    question: "С какими CI-системами работали? В чем отличия Jenkins от TeamCity и других аналогичных систем"
                    answer: "Главное отличие TeamCity от Jenkins в синтаксисе и компоновке пайплайнов."
                    level: "middle"
                -
                    question: "Как разрешать конфликты слияния?"
                    answer: "Например, с помощью rebase."
                    level: "middle"
        general:
            questions:
                -
                    question: "Опишите модель OSI и все ее уровни"
                    answer: "OSI — сетевая модель стека (магазина) сетевых протоколов OSI/ISO. Посредством данной модели различные сетевые устройства могут взаимодействовать друг с другом. Модель определяет различные уровни взаимодействия систем. Каждый уровень выполняет определённые функции при таком взаимодействии. В модели OSI средства взаимодействия делятся на семь уровней: прикладной, представления, сеансовый, транспортный, сетевой, канальный и физический."
                    level: "junior"
                -
                    question: "Что такое DevOps, Agile?"
                    answer: "Методологии/философии разработки программного обеспечения."
                    level: "junior"
                -
                    question: "Зачем нужен DevOps?"
                    answer: "Чтобы разработчикам и клиентам было удобнее делать что угодно."
                    level: "junior"
                -
                    question: "Какие инструменты вы считаете лучшими для DevOps и как они работают вместе?"
                    answer: "Linux, Kubernetes, Bash-скрипты и кружка кофе.."
                    level: "junior"
                -
                    question: "Расскажите про GitOps."
                    answer: "GitOps - это общее название девопс практик, которые завязаны на тесной интеграции гита ВЕЗДЕ."
                    level: "middle"
                -
                    question: "Расскажите про опыт CI/CD для Kubernetes с использованием Git."
                    answer: "*Хороший рассказ про опыт*"
                    level: "senior"
        linux:
            questions:
                -
                    question: "Как управлять системными сервисами?"
                    answer: "Для этого существует команда systemctl."
                    level: "junior"
                -
                    question: "Что показывает команда df?"
                    answer: "Показывает свободное место в файловой системе."
                    level: "junior"
                -
                    question: "В чем разница между командами df и du?"
                    answer: "Разница в том, что du показывает занимаемое файлами место в текущей или указанной директории, df - общие сведения о свободном и занятом месте в системе."
                    level: "junior"
                -
                    question: "Расскажите про структуру файловой системы в Linux."
                    answer: "Файловая система linux с корневной папки. В ней расположены другие системные папки, среди которых etc, home, dev ...."
                    level: "junior"
                -
                    question: "Что делает команда echo?"
                    answer: "Выводит что-либо в терминал."
                    level: "junior"
                -
                    question: "Что такое ulimit?"
                    answer: "Ulimit - системные пределы по открытым файлам, процессам и т д."
                    level: "middle"
                -
                    question: "Как создавать системные сервисы для systemd?"
                    answer: "Для этого существует определенная структура файлов, которые размещаются в etc/systemd."
                    level: "middle"
                -
                    question: "Расскажите про символические ссылки."
                    answer: "Символическая ссылка - файл указывающий на другой файл."
                    level: "middle"
                -
                    question: "Какими способами можно оптимизировать использование оперативной памяти в системе?"
                    answer: "Не запускать много приложений?!"
                    level: "senior"
                - 
                    question: "Расскажите как вы подходили к безопасности системы?"
                    answer: "Нужно ставить сложные пароли, не работать под рутом и использовать антивирус касперского :)"
                    level: "senior"
        python:
            questions:
                -
                    question: "Как устанавливать и импортировать библиотеки?"
                    answer: "Библиотеки устанавливаются командой pip install, а импортируются import."
                    level: "junior"
                -
                    question: "Что такое виртуальное окружение?"
                    answer: "Это отдельный экземпляр интерпретатора python с отдельным набором библиотек отличным от системного."
                    level: "junior"
                -
                    question: "Что такое f-строка?"
                    answer: "Это строка, в которую можно подставлять переменные без использования форматирования."
                    level: "junior"
                -
                    question: "Для чего используется библиотека requests?"
                    answer: "Для отправки http запросов."
                    level: "junior"
                -      
                    question: "Для чего нужны лямбда функции?"
                    answer: "Лямбда функции - это анонимные функции которые не нужно объявлять явным образом."
                    level: "middle"
                -
                    question: "О чем говорится в стандарте PEP8?"
                    answer: "О том как должен быть оформлен код на python."
                    level: "middle"
                -
                    question: "Опишите простую структуру python репозитория."
                    answer: "Readme, файл requirements, и модули, инициализируемые файлом __init__.py."
                    level: "middle"
                -
                    question: "Расскажите о том как вы использовали классы в python."
                    answer: "*Рассказ о том как использовали классы*"
                    level: "middle"

frontend:
    levels:
        - 
            name: "junior"
        - 
            name: "middle"
    categories:
        general:
            questions:
                -
                    question: "Что такое HTTP?"
                    answer: "HTTP — протокол прикладного уровня передачи данных, изначально — в виде гипертекстовых документов в формате HTML, в настоящее время используется для передачи произвольных данных."
                    level: "junior"
                -
                    question: "Что такое HTTP cookie и для чего их используют?"
                    answer: "HTTP cookie (web cookie, куки браузера) - это небольшой фрагмент данных, который сервер отправляет браузеру пользователя. Браузер может сохранить этот фрагмент у себя и отправлять на сервер с каждым последующим запросом."
                    level: "junior"
                - 
                    question: "Расскажите о CSS методологиях."
                    answer: "CSS-методологии - это стандарт написания CSS таким образом, чтобы его можно было поддерживать и читать другим членам команды или сторонним разработчикам. Напрмиер, Atomic CSS. В этой методологии создается набор классов — инструментов, которые унифицируют правила. Классы комбинируются непосредственно в блоке HTML, то есть стили элементов задаются не в CSS. Таким образом облегчается задача верстальщика, так как ему не нужно переключаться между контекстами."
                    level: "junior"
                - 
                    question: "Ваше приложение тормозит или долго грузится, на что первое обратите внимание? и как будете действовать?"
                    answer: "Вариантов масса. Можно заглянуть в network и проверить сколько запросов отправляется и какой объем данных передается. Может быть у нас тяжелые картинки или цикличные запросы. Можно прогнать профилировщик во вкладке performance и понять на что тратятся ресурсы при отрисовке. Возможно у нас долго парсится и выполняется JavaScript код. Соответственно нужно уметь пользоваться инструментами браузера для эффективного обнаружения проблем. Что можно сделать? Тут тоже вариантов много: сжатие медиафайлов, кеширование на сервере, Code spliting с помощью webpack, Lazy Loading, Чистка кода, мемоизация методов, оптимизация работы кода, Серверный рендеринг"
                    level: "middle"
                - 
                    question: "Как бы вы организовали структуру файлов и папок на проекте?"
                    answer: "Файлы должны быть организованы на основе функций. Создание границ модулей: Вместо бессистемного импорта функций из множества разных файлов из модуля проектов важно создать интерфейс, для чего предназначен файл index.js в корне папки проектов. index.js — это файл, который должен быть импортирован другими модулями для получения доступа к любым функциям в модуле проектов. Также необходимо избегать использования циклических зависимостей. Это означает, что у нас не может быть двух файлов, которые зависели бы друг от друга. "
                    level: "middle"
                - 
                    question: "Расскажите о пирамиде тестирования."
                    answer: "Это отличная визуальная метафора, наталкивающая на мысль о разных уровнях тестов. Она также показывает объём тестов на каждом уровне. Оригинальная пирамида тестов Майка Кона состоит из трёх уровней (снизу вверх): Юнит-тесты, Сервисные тесты, Тесты пользовательского интерфейса. Из этой пирамиды главное запомнить два принципа: Писать тесты разной детализации, и чем выше уровень, тем меньше тестов."
                    level: "middle"
                - 
                    question: "Расскажите, как вы понимаете Web Accessibility"
                    answer: "Доступность — это практика, позволяющая использовать ваши сайты как можно большему числу людей. Мы традиционно думаем об этом как о доступности для людей с ограниченными возможностями, но на самом деле, в это число входят и другие группы пользователей, которые используют мобильные устройства либо имеют медленное сетевое соединение."
                    level: "middle"
        htmlcss:
            questions:
                -
                    question: "Опишите базовую структуру HTML-документа."
                    answer: "Любой HTML-документ можно разбить на несколько основных составляющих: Блок head, содержащий метаинформацию о нашем сайте(<!DOCTYPE html>, <html lang="ru">, title>Unique page title - My Site</title>, Мета-теги, подключаемые скрипты, шрифты и стили, ...). Блок body является основным местом, где строится HTML-разметка."
                    level: "junior"
                -
                    question: "Что такое метатеги?"
                    answer: "HTML-теги, предназначенные для предоставления структурированных метаданных (дополнительных, сопроводительных) о веб-странице[1]. Как правило, указываются в заголовке (теге <Head>) (X)HTML-документа. "
                    level: "junior"
                - 
                    question: "Что такое HTML-тег?"
                    answer: "элемент языка разметки гипертекста. Текст, содержащийся между начальным и конечным тегом, отображается и размещается в соответствии со свойствами, указанными в начальном теге. Обычно используются парные теги — открывающий, или начальный, и закрывающий, или конечный. Возможно также применение одиночного тега."
                    level: "junior"
                - 
                    question: "Все теги в HTML являются парными?"
                    answer: "В языке HTML происходит деление тегов на одинарные (не парные) и парные теги. Одинарные HTML теги состоят из одного тега, то есть, у них нет закрывающего тега (<br>, <img>, ...). А парные дескрипторы состоят из двух частей, одна из которых указывает начало, другая конец (<h1></h1>, <p></p>, ...)."
                    level: "junior"
                - 
                    question: "Что такое блочная модель, и как, с помощью CSS, менять расположение блоков на странице в браузере?"
                    answer: "Псевдоэлемент в CSS — это ключевое слово, которое добавляется к селектору и позволяет стилизовать определенную часть выбранного элемента. Псевдоэлементы: :after — применяется для вставки нужного контента после выбранного элемента. Применяется со свойством content, которое определяет содержимое для вставки, :before — применяется для вставки нужного контента до выбранного элемента. Также необходимо задать свойство content с содержимым для вставки, :first-letter — добавляет к первому элементу в тексте и определяет его стиль: можно создавать буквицу (увеличенную первую букву, базовая линия которой ниже на одну или несколько строк базовой линии основного текста) или выступающий инициал (увеличенная прописная буква, линия которой совпадает с линией основного текста), :first-line — используется для изменения первой строки блочного текста."
                    level: "junior"
                - 
                    question: "Что такое #shadow-root в инспекторе HTML-страницы?"
                    answer: "Дочернее дерево размещается внутри некоторого элемента на странице. Функциональные границы между главным деревом документа и теневым называются shadow boundaries (теневые границы). Элемент, который размещает в себе теневое дерево, называется shadow host, а корень теневого дерево, соответственно, называется shadow root."
                    level: "middle"
                - 
                    question: "Почему удаление лишних символов пробелов (и символов переноса) в HTML не отражается на конечной производительности загрузки страницы?"
                    answer: "Лишние символы в исходном коде страниц — это пробелы и пустые строки. С их помощью удобно обозначать структуру кода в редакторе дизайна. Так удобнее его редактировать, когда нужно что-то изменить на сайте. А браузеру, который получит такой HTML, пробелы и пустые строки совсем «не интересны» — он их просто пропускает. А внутри текста группы пробелов отображаются как один-единственный пробел, и все остальные пробелы в такой группе игнорируются, а значит, были просто напрасно переданы в браузер."
                    level: "middle"
                - 
                    question: "Какие CSS-свойства могут быть обработаны непосредственно через GPU? Что такое композитные слои и почему большое их количество может привести к аварийному завершению работы браузера на мобильных устройствах?"
                    answer: "Браузеры умеют рисовать некоторые части страницы на GPU. Особенно это заметно на анимациях. Например, анимация, сделанная с помощью CSS-свойства transform выглядит гораздо приятнее и плавнее, чем анимация, сделанная через top/left. Слой (композитный слой) — это часть страницы, поддерево DOM. Он отрисовывается независимо и компонуется в GPU. Он может растягиваться, перемещаться, скрываться (через прозрачность) без отрисовки. Текстуры могут занимать достаточно много места в памяти, что на мобильных устройствах становится проблемой. Кроме того, можно легко забить шину между CPU и GPU. К GPU нужно относиться как к кэшу. Старайтесь подготавливать текстуры заранее и по возможности переиспользовать имеющиеся. Не стоит создавать лишних слоев."
                    level: "middle"
                - 
                    question: "Как адаптировать страницу для печати?"
                    answer: "Встроить CSS стили для печати: описать директиву @media print в своем CSS. Использовать абсолютные единицы: Абсолютные единицы не годятся для экранов, но хорошо работают для печати. В стилях для печати совершенно безопасно и даже рекомендуется использование таких абсолютных единиц как cm, mm, in, pt или pc. Указать отдельные правила для страницы с помощью директивы @page: очень удобно, если вы хотите, чтобы у всех страниц были определенные поля. Контроль разрывов страниц, удаление ненужного контента, настройка отражения ссылок."
                    level: "middle"
        javascript:
            questions:
                -
                    question: "Что такое замыкание (closure) и какие существуют сценарии его использования?"
                    answer: "Замыкание — это комбинация функции и лексического окружения, в котором эта функция была определена. Другими словами, замыкание даёт вам доступ к Scope внешней функции из внутренней функции. В JavaScript замыкания создаются каждый раз при создании функции, во время её создания."
                    level: "junior"
                -
                    question: "С помощью чего в JS реализуются наследование?"
                    answer: "В плане наследования JavaScript работает лишь с одной сущностью: объектами. Каждый объект имеет внутреннюю ссылку на другой объект, называемый его прототипом. У объекта-прототипа также есть свой собственный прототип и так далее до тех пор, пока цепочка не завершится объектом, у которого свойство prototype равно null. Классы в JavaScript поддерживают наследование с помощью ключевого слова extends."
                    level: "junior"
                - 
                    question: "Что такое типы данных и как их сравнивать? Чем отличается == от ===? Что такое null и undefined?"
                    answer: "Есть восемь основных типов данных в JavaScript: Число, BigInt, Строка, Булево, null, undefined, object, symbol. Оператор == сравнивает на равенство, а вот === — на идентичность. Плюс оператора === состоит в том, что он не приводит два значения к одному типу. В JavaScript null — это литерал и ключевое слово языка, которое представляет собой отсутствие какого-либо объекта. В свою очередь, хоть и похожий по смыслу undefined , олицетворяет отсутствие значения как такового. "
                    level: "junior"
                - 
                    question: "Как работают методы .filter, .map, .reduce и зачем они нужны?"
                    answer: "map, filter и reduce - операторы списков. Когда вызывается map для массива, каллбек выполняется для каждого элемента данного массива, затем возвращается новый массив со значениями обработанными каллбеком. filter вызывает каллбек для каждого элемента массива, в результате возвращается новый массив, содержащий только элементы, для которых каллбек возвратил true. reduce в свою очередь, берёт все элементы в массиве, преобразует их в новое значение и его возвращает."
                    level: "junior"
                -
                    question: "Что такое this-объект?"
                    answer: "Как правило, методу объекта необходим доступ к информации, которая хранится в объекте, чтобы выполнить с ней какие-либо действия (в соответствии с назначением метода). Значение this – это объект «перед точкой», который использовался для вызова метода."
                    level: "junior"
                -
                    question: "Что такое temporal dead zone?"
                    answer: "Временная мертвая зона (TDZ) — это область блока, в которой переменная недоступна до момента, когда компьютер полностью инициализирует ее значением."
                    level: "middle"
                -
                    question: "Как работает boxing/unboxing в JavaScript?"
                    answer: "JavaScript автоматически упаковывает примитивные типы в соответствующие объекты, когда встречает вызовы методов на них (и затем автоматически распаковывает). То есть в действительности, все методы которые мы вызываем на строках, хранятся в прототипе конструктора String. То же самое касается и всех остальных типов."
                    level: "middle"
                -
                    question: "Как реализовать паттерн «Модуль»?"
                    answer: "Паттерн «Модуль» базируется на замыканиях и состоит из двух компонентов: внешняя функция, которая определяет лексическое окружение, и возвращаемый набор внутренних функций, которые имеют доступ к этому окружению."
                    level: "middle"
                -
                    question: "Опишите назначение и принципы работы с коллекциями WeakMap и WeakSet. Чем они отличаются от коллекций Map и Set соответственно?"
                    answer: "Движок JavaScript хранит значения в памяти до тех пор, пока они достижимы. Первое отличие WeakMap от Map в том, что ключи в WeakMap должны быть объектами, а не примитивными значениями. Если мы используем объект в качестве ключа и если больше нет ссылок на этот объект, то он будет удалён из памяти (и из объекта WeakMap) автоматически. Методы: weakMap.get(key), weakMap.set(key, value), weakMap.delete(key), weakMap.has(key). В основном, WeakMap используется в качестве дополнительного хранилища данных. Коллекция WeakSet ведёт себя похоже: Она аналогична Set, но мы можем добавлять в WeakSet только объекты. Объект присутствует в множестве только до тех пор, пока доступен где-то ещё. Gоддерживает add, has и delete, но не size, keys() и не является перебираемой. WeakSet лужит в качестве дополнительного хранилища для значений типа «да/нет»"
                    level: "middle"
                -
                    question: "Расскажите о последовательном и параллельном выполнении асинхронных функций. В чем разница между Promise.all ) и Promise.allSettled()?"
                    answer: "Модуль async - способ организовывать параллельное и последовательное выполнение асинхронного кода или преобразование массивов с его помощью. Promise  — это объект, представляющий возможное завершение или сбой асинхронной операции. Promise.all будет выполнятьвсе промисы до тех пор, пока не будет выполнено одно из условий: Все они разрешаются или один из них терпит неудачу, что немедленно отклонит возвращенный промис. Суть Promise.allSettled()метода заключается в том, что, в отличие от предыдущего метода, Promise.all()он не завершится ошибкой после отклонения первого промиса. Вместо этого он вернет список значений. Эти значения будут объектами с двумя свойствами: Статус возвращенного промиса (rejectedили fulfilled) , значение выполненного промиса или причина его отклонения."
                    level: "middle"
        react:
            questions:
                - 
                    question: "Что такое virtual DOM?"
                    answer: "DOM (аббревиатура от Document Object Model) — способ представления структурного документа с помощью объектов. Главная проблема DOM — он никогда не был рассчитан для создания динамического пользовательского интерфейса (UI). Вместо того, чтобы взаимодействовать с DOM напрямую, мы работаем с его легковесной копией. Мы можем вносить изменения в копию, исходя из наших потребностей, а после этого применять изменения к реальному DOM. При этом происходит сравнение DOM-дерева с его виртуальной копией, определяется разница и запускается перерисовка того, что было изменено. "
                    level: "junior"
                -  
                    question: "Для чего нужен атрибут key при рендере списков?" 
                    answer: "Ключи помогают React определять, какие элементы были изменены, добавлены или удалены. Их необходимо указывать, чтобы React мог сопоставлять элементы с течением времени."
                    level: "junior"
                -  
                    question: "Что такое хуки в React? Какие хуки вы знаете?" 
                    answer: "Хуки — это функции, с помощью которых вы можете «подцепиться» к состоянию и методам жизненного цикла React из функциональных компонентов. Хуки не работают внутри классов — они дают вам возможность использовать React без классов. useState — это хук, используя который можно чтобы наделить функциональный компонент внутренним состоянием. С помощью хука эффекта useEffect вы можете выполнять побочные эффекты из функционального компонента. С с помощью useContext, можно подписаться на контекст React без использования каких-либо вложений."
                    level: "junior"
                -  
                    question: "Какие методы жизненного цикла компонента существуют в React?" 
                    answer: "Метод componentDidMount() запускается после того, как компонент отрендерился в DOM. componentWillUnmount() вызывается непосредственно перед размонтированием и удалением компонента."
                    level: "junior"
                -  
                    question: "Что такое Context в React и для чего он используется?" 
                    answer: "В типичном React-приложении данные передаются сверху вниз (от родителя к дочернему компоненту) с помощью пропсов. Однако, подобный способ использования может быть чересчур громоздким для некоторых типов пропсов (например, выбранный язык, UI-тема), которые необходимо передавать во многие компоненты в приложении. Контекст предоставляет способ делиться такими данными между компонентами без необходимости явно передавать пропсы через каждый уровень дерева."
                    level: "junior"
                -  
                    question: "Какие преимущества компонентного подхода в React?" 
                    answer: "Разработка интерфейса на React осуществляется посредством деления его на отдельные части (компоненты). Каждый из них содержит определённую разметку и связанную с ней логику. Компоненты значительно упрощают разработку пользовательского интерфейса, т.к. над каждым из них мы можем работать независимо. При этом компоненты можно включать в другие компоненты и тем самым определять структуру разрабатываемого приложения."
                    level: "middle"
                -  
                    question: "Чем отличаются хуки или классов в React?" 
                    answer: "Код функционального компонента гораздо проще кода аналогичного компонента, основанного на классах. Для его использования не нужно создавать экземпляр класса, не нужно вызывать render(). Достаточно просто вызвать нужную функцию. Хуки React обладают многими достоинствами, они способны помочь программисту в решении множества задач. Одна из главнейших сильных сторон хуков заключается в том, что они упрощают работу с методами жизненного цикла компонентов React."
                    level: "middle"
                -  
                    question: "Какие способы оптимизации React приложений?" 
                    answer: "Если вы испытываете проблемы с производительностью в React-приложении, убедитесь в том, что вы проводите тесты с настройками минифицированной продакшен-сборки. По умолчанию в React есть много вспомогательных предупреждений, очень полезных при разработке. Тем не менее, они делают React больше и медленнее, поэтому вам обязательно следует использовать продакшен-версию при деплое приложения. Пакеты react-dom версии 16.5+ и react-native версии 0.57+ предоставляют расширенные возможности анализа производительности в режиме разработки с помощью инструментов разработчика React Profiler."
                    level: "middle"
